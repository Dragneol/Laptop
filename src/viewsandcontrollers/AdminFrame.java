/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewsandcontrollers;

import util.*;
import Comparator.*;
import java.util.*;
import daos.LapTopDAO;
import dtos.LaptopDTO;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.Message;

/**
 *
 * @author DuongPTH
 */
public class AdminFrame extends javax.swing.JFrame {

    DefaultTableModel model = null;
    LapTopDAO dao = null;
    String urlImg;

    /**
     * Creates new form Guest
     */
    public AdminFrame() {
        initComponents();

        model = (DefaultTableModel) tblList.getModel();
        dao = new LapTopDAO();
        refreshTable("");

    }

    public AdminFrame(String user) {
        initComponents();
        lblUser.setText("Administrator : " + user);
        model = (DefaultTableModel) tblList.getModel();
        dao = new LapTopDAO();
        refreshTable("");

    }

    private void refreshTable(String request) {
        model.setRowCount(0);
        List<LaptopDTO> result = dao.showTable(request);
        for (LaptopDTO laptopDTO : result) {
            model.addRow(laptopDTO.toVector());
        }
    }

    private void updateTable(List<LaptopDTO> tbl) {
        model.setRowCount(0);
        List<LaptopDTO> result = tbl;
        for (LaptopDTO laptopDTO : result) {
            model.addRow(laptopDTO.toVector());
        }
    }

    private void sortAscByName() {
        Collections.sort(dao.getList(), new AlphabetComparator());
        updateTable(dao.getList());
    }

    private void sortAscByPrice() {
        Collections.sort(dao.getList(), new PriceComparator());
        updateTable(dao.getList());
    }

    private void sortDesByPrice() {
        Collections.sort(dao.getList(), new PriceComparator());
        model.setRowCount(0);
        List<LaptopDTO> tbl = dao.getList();
        for (int i = tbl.size() - 1; i > 0; i--) {
            model.addRow(tbl.get(i).toVector());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sort = new javax.swing.ButtonGroup();
        pnlTile = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        lblUser = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        pnlTbl = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlDetail = new javax.swing.JPanel();
        pnlImg = new javax.swing.JPanel();
        lblImg = new javax.swing.JLabel();
        pnlInfo = new javax.swing.JPanel();
        txtBrand = new javax.swing.JTextField();
        txtSerial = new javax.swing.JTextField();
        txtChipset = new javax.swing.JTextField();
        txtChipsetSerial = new javax.swing.JTextField();
        txtRAMType = new javax.swing.JTextField();
        txtRAMCapacity = new javax.swing.JTextField();
        txtHDDCapacity = new javax.swing.JTextField();
        txtScreen = new javax.swing.JTextField();
        txtGraphicCard = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        chkDVD = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pnlMajor = new javax.swing.JPanel();
        chkSE = new javax.swing.JCheckBox();
        chkSB = new javax.swing.JCheckBox();
        chkIA = new javax.swing.JCheckBox();
        chkGD = new javax.swing.JCheckBox();
        pnlAdmin = new javax.swing.JPanel();
        chkDelete = new javax.swing.JCheckBox();
        btnEditImg = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        pnlFeature = new javax.swing.JPanel();
        pnlSearch = new javax.swing.JPanel();
        pnlInfoSearch = new javax.swing.JPanel();
        txtBrandSearch = new javax.swing.JTextField();
        txtSerialSearch = new javax.swing.JTextField();
        txtChipsetSearch = new javax.swing.JTextField();
        txtChipsetSerialSearch = new javax.swing.JTextField();
        txtRAMTypeSearch = new javax.swing.JTextField();
        txtRAMCapacitySearch = new javax.swing.JTextField();
        txtHDDCapacitySearch = new javax.swing.JTextField();
        txtScreenSearch = new javax.swing.JTextField();
        txtGraphicCardSearch = new javax.swing.JTextField();
        txtPriceFrom = new javax.swing.JTextField();
        txtPriceTo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        pnlRequirement = new javax.swing.JPanel();
        chkSESearch = new javax.swing.JCheckBox();
        chkSBSearch = new javax.swing.JCheckBox();
        chkIASearch = new javax.swing.JCheckBox();
        chkGDSearch = new javax.swing.JCheckBox();
        chkDVDSearch = new javax.swing.JCheckBox();
        btnSearch = new javax.swing.JButton();
        pnlSort = new javax.swing.JPanel();
        rdnName = new javax.swing.JRadioButton();
        rdnAscPrice = new javax.swing.JRadioButton();
        rdnDecPrice = new javax.swing.JRadioButton();
        btnSort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1178, 533));
        setResizable(false);

        pnlTile.setMaximumSize(new java.awt.Dimension(978, 100));
        pnlTile.setMinimumSize(new java.awt.Dimension(978, 100));

        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Dialog", 3, 36)); // NOI18N
        label1.setText("Welcome,");

        lblUser.setFont(new java.awt.Font("Tahoma", 3, 48)); // NOI18N

        btnLogOut.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        btnLogOut.setText("Log out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTileLayout = new javax.swing.GroupLayout(pnlTile);
        pnlTile.setLayout(pnlTileLayout);
        pnlTileLayout.setHorizontalGroup(
            pnlTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTileLayout.setVerticalGroup(
            pnlTileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(lblUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Serial", "ChipSetSerial", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListMouseClicked(evt);
            }
        });
        pnlTbl.setViewportView(tblList);
        if (tblList.getColumnModel().getColumnCount() > 0) {
            tblList.getColumnModel().getColumn(1).setResizable(false);
        }

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        pnlDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Laptop's Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14)))); // NOI18N

        pnlImg.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));
        pnlImg.setPreferredSize(new java.awt.Dimension(300, 300));
        pnlImg.setLayout(new java.awt.BorderLayout());
        pnlImg.add(lblImg, java.awt.BorderLayout.CENTER);

        pnlInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Infor"));

        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        chkDVD.setText("DVD reader");

        jLabel1.setText("Brand");

        jLabel2.setText("Serial");

        jLabel3.setText("Chipset");

        jLabel4.setText("Chipset Serial");

        jLabel5.setText("RAM Type");

        jLabel6.setText("RAM Capacity(GB)");

        jLabel7.setText("HDD Capacity(GB)");

        jLabel8.setText("Screen(Inch)");

        jLabel9.setText("Graphic Card");

        jLabel10.setText("Price (thousand vnd)");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInfoLayout.createSequentialGroup()
                        .addComponent(txtPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDVD))
                    .addComponent(txtGraphicCard)
                    .addComponent(txtScreen)
                    .addComponent(txtHDDCapacity)
                    .addComponent(txtRAMCapacity)
                    .addComponent(txtRAMType)
                    .addComponent(txtChipsetSerial)
                    .addComponent(txtChipset)
                    .addComponent(txtSerial)
                    .addComponent(txtBrand, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChipset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChipsetSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRAMType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRAMCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHDDCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGraphicCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDVD)
                    .addComponent(jLabel10)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMajor.setBorder(javax.swing.BorderFactory.createTitledBorder("Suitable for Major"));
        pnlMajor.setLayout(new java.awt.GridLayout(1, 0));

        chkSE.setText("Software Engineering");
        pnlMajor.add(chkSE);

        chkSB.setText("International Bussiness");
        pnlMajor.add(chkSB);

        chkIA.setText("Information Assurance");
        pnlMajor.add(chkIA);

        chkGD.setText("Graphic Design");
        chkGD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGDActionPerformed(evt);
            }
        });
        pnlMajor.add(chkGD);

        pnlAdmin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Administrator Function", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14))); // NOI18N
        pnlAdmin.setLayout(new java.awt.GridLayout(1, 0));

        chkDelete.setText("Deleted");
        pnlAdmin.add(chkDelete);

        btnEditImg.setText("Edit Image");
        btnEditImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditImgActionPerformed(evt);
            }
        });
        pnlAdmin.add(btnEditImg);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlAdmin.add(btnUpdate);

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        pnlAdmin.add(btnInsert);

        javax.swing.GroupLayout pnlDetailLayout = new javax.swing.GroupLayout(pnlDetail);
        pnlDetail.setLayout(pnlDetailLayout);
        pnlDetailLayout.setHorizontalGroup(
            pnlDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMajor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDetailLayout.createSequentialGroup()
                        .addComponent(pnlImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDetailLayout.setVerticalGroup(
            pnlDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Laptop's Detail", pnlDetail);

        pnlSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Laptop", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        pnlInfoSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Infor"));

        txtPriceFrom.setText("2000");

        txtPriceTo.setText("20000");

        jLabel12.setText("Brand");

        jLabel13.setText("Serial");

        jLabel14.setText("Chipset");

        jLabel15.setText("Chipset Serial");

        jLabel16.setText("RAM Type");

        jLabel17.setText("RAM Capacity");

        jLabel18.setText("HDD Capacity");

        jLabel19.setText("Screen");

        jLabel20.setText("Graphic Card");

        jLabel21.setText("Price");

        jLabel11.setText("To");

        jLabel22.setText("From");

        javax.swing.GroupLayout pnlInfoSearchLayout = new javax.swing.GroupLayout(pnlInfoSearch);
        pnlInfoSearch.setLayout(pnlInfoSearchLayout);
        pnlInfoSearchLayout.setHorizontalGroup(
            pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtGraphicCardSearch)
                    .addComponent(txtScreenSearch)
                    .addComponent(txtHDDCapacitySearch)
                    .addComponent(txtRAMCapacitySearch)
                    .addComponent(txtRAMTypeSearch)
                    .addComponent(txtChipsetSerialSearch)
                    .addComponent(txtChipsetSearch)
                    .addComponent(txtSerialSearch)
                    .addComponent(txtBrandSearch, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInfoSearchLayout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPriceTo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlInfoSearchLayout.setVerticalGroup(
            pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBrandSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerialSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChipsetSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChipsetSerialSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRAMTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRAMCapacitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHDDCapacitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScreenSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGraphicCardSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21)
                        .addComponent(txtPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22)
                        .addComponent(jLabel11))
                    .addComponent(txtPriceTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlRequirement.setBorder(javax.swing.BorderFactory.createTitledBorder("Other Requirement"));

        chkSESearch.setText("Software Engineering");

        chkSBSearch.setText("International Bussiness");

        chkIASearch.setText("Information Assurance");

        chkGDSearch.setText("Graphic Design");
        chkGDSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGDSearchActionPerformed(evt);
            }
        });

        chkDVDSearch.setText("DVD reader");

        javax.swing.GroupLayout pnlRequirementLayout = new javax.swing.GroupLayout(pnlRequirement);
        pnlRequirement.setLayout(pnlRequirementLayout);
        pnlRequirementLayout.setHorizontalGroup(
            pnlRequirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRequirementLayout.createSequentialGroup()
                .addGroup(pnlRequirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkIASearch)
                    .addComponent(chkGDSearch)
                    .addComponent(chkSBSearch)
                    .addComponent(chkSESearch)
                    .addComponent(chkDVDSearch))
                .addGap(16, 16, 16))
        );
        pnlRequirementLayout.setVerticalGroup(
            pnlRequirementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRequirementLayout.createSequentialGroup()
                .addComponent(chkGDSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkIASearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSBSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSESearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(chkDVDSearch)
                .addContainerGap())
        );

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInfoSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlInfoSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                        .addComponent(pnlRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );

        pnlSort.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RESET and Sort List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 18))); // NOI18N
        pnlSort.setLayout(new java.awt.GridLayout(1, 0));

        sort.add(rdnName);
        rdnName.setSelected(true);
        rdnName.setText("Sort By Name");
        pnlSort.add(rdnName);

        sort.add(rdnAscPrice);
        rdnAscPrice.setText("Asc Sort By Price");
        rdnAscPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdnAscPriceActionPerformed(evt);
            }
        });
        pnlSort.add(rdnAscPrice);

        sort.add(rdnDecPrice);
        rdnDecPrice.setText("Dec Sort By Price");
        pnlSort.add(rdnDecPrice);

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });
        pnlSort.add(btnSort);

        javax.swing.GroupLayout pnlFeatureLayout = new javax.swing.GroupLayout(pnlFeature);
        pnlFeature.setLayout(pnlFeatureLayout);
        pnlFeatureLayout.setHorizontalGroup(
            pnlFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFeatureLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFeatureLayout.setVerticalGroup(
            pnlFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFeatureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Feature", pnlFeature);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTbl)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkGDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkGDActionPerformed

    private void tblListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListMouseClicked
        // TODO add your handling code here:
        int row = tblList.getSelectedRow();
        LaptopDTO dto = dao.getLaptopByRow(row);

        txtBrand.setText(dto.getBrand());
        txtSerial.setText(dto.getSerial());
        txtChipset.setText(dto.getChipSet());
        txtChipsetSerial.setText(dto.getChipSetSerial());
        txtGraphicCard.setText(dto.getGraphicCard());
        txtHDDCapacity.setText(dto.getHddCapacity());
        txtRAMCapacity.setText(dto.getRamCapacity());
        txtRAMType.setText(dto.getRamType());
        txtScreen.setText(dto.getScreen());
        txtPrice.setText(String.valueOf(dto.getPrice()));

        chkDVD.setSelected(dto.isHaveDVD());
        chkSE.setSelected(dto.isForSE());
        chkSB.setSelected(dto.isForSB());
        chkIA.setSelected(dto.isForIA());
        chkGD.setSelected(dto.isForGD());
        chkDelete.setSelected(dto.isDeleted());

        urlImg = new String(dto.getImg());

        try {
            ImageLoader.loadImage(urlImg, lblImg);
        } catch (Exception ex) {
            util.Message.showMessage("This Laptop temporary does not have image");
        }
    }//GEN-LAST:event_tblListMouseClicked

    private void chkGDSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGDSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkGDSearchActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // TODO add your handling code here:

        if (rdnName.isSelected()) {
//            refreshTable("Order by Brand, Serial");
            sortAscByName();
        } else if (rdnAscPrice.isSelected()) {
//            refreshTable("Order by Price ASC");
            sortAscByPrice();
        } else {
//            refreshTable("Order by Price DESC");
            sortDesByPrice();
        }
    }//GEN-LAST:event_btnSortActionPerformed

    private void rdnAscPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdnAscPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdnAscPriceActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int from, to;
        try {
            from = Integer.parseInt(txtPriceFrom.getText());
            if (from < 1000) {
                throw new Exception();
            }
            to = Integer.parseInt(txtPriceTo.getText());
            if (to < from) {
                throw new Exception();
            }
        } catch (Exception e) {
            util.Message.showMessage("Check following condition:\n"
                    + "1./ Price must be positive integer greater than 1000(No Laptop have price 1.000.000 vnd)\n"
                    + "2./ Price-To must be greater than Price-From\n"
                    + "CAUTION: ALWAYS INSERT THE PRICE YOU WANT FIRST");
            return;
        }
        String brand = txtBrandSearch.getText().toUpperCase().trim();
//        if (brand.length() != 0) {
//            if (!util.Tools.checkBrand(brand)) {
//                util.Message.showMessage("Invalid Brand");
//                return;
//            }
//        }

        String chip = txtChipsetSearch.getText().toUpperCase().trim();
        String chipSerial = txtChipsetSerialSearch.getText().toUpperCase().trim();
        String graphicCard = txtGraphicCardSearch.getText().toUpperCase().trim();

        String hdd = txtHDDCapacitySearch.getText();
        if (hdd.length() != 0) {
            try {
                util.Tools.getInt(hdd, 500, Integer.MAX_VALUE);
            } catch (Exception e) {
                util.Message.showMessage(e.getMessage());
                return;
            }
        }

        String ram = txtRAMCapacitySearch.getText();
        if (ram.length() != 0) {
            try {
                if (!util.Tools.checkRAM(ram)) {
                }
            } catch (Exception e) {
                util.Message.showMessage(e.getMessage());
                return;
            }
        }

        String ramType = txtRAMTypeSearch.getText().toUpperCase().trim();
        if (ramType.length() != 0) {
            if (!util.Tools.checkRAMType(ramType)) {
                util.Message.showMessage("RAM Type invalid : " + ramType
                        + "\nOnly DDR4 or DDR3 accepted");
                return;
            }
        }

        String screen = txtScreenSearch.getText().toUpperCase().trim();
        if (screen.length() != 0) {
            if (!util.Tools.checkScreen(screen)) {
                util.Message.showMessage("Screen solution accepted only 13, 14, 15.6, 17.3");
                return;
            }
        }
        String serial = txtSerialSearch.getText();

        boolean dvd = chkDVDSearch.isSelected();
        boolean se = chkSESearch.isSelected();
        boolean sb = chkSBSearch.isSelected();
        boolean ia = chkIASearch.isSelected();
        boolean gd = chkGDSearch.isSelected();

        updateTable(dao.search(brand, serial, chip, chipSerial, ramType, ram, hdd, graphicCard, screen, from, to, se, sb, ia, gd, dvd));
        util.Message.showMessage("Searched!\n" + dao.getList().size() + " Laptop found!");
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTabbedPane1MouseClicked


    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int price;
        try {
            price = util.Tools.getInt(txtPrice.getText(), 1000, Integer.MAX_VALUE);
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String brand = txtBrand.getText().toUpperCase().trim();
        if (!util.Tools.checkBrand(brand)) {
            util.Message.showMessage("Invalid Brand");
            return;
        }

        String chip = txtChipset.getText().toUpperCase().trim();
        String chipSerial = txtChipsetSerial.getText().toUpperCase().trim();
        String graphicCard = txtGraphicCard.getText().toUpperCase().trim();

        String hdd = txtHDDCapacity.getText();
        try {
            util.Tools.getInt(hdd, 500, Integer.MAX_VALUE);
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String ram = txtRAMCapacity.getText();
        try {
            if (!util.Tools.checkRAM(ram)) {
            }
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String ramType = txtRAMType.getText().toUpperCase().trim();
        if (!util.Tools.checkRAMType(ramType)) {
            util.Message.showMessage("RAM Type invalid : " + ramType
                    + "\nOnly DDR4 or DDR3 accepted");
            return;
        }

        String screen = txtScreen.getText().toUpperCase().trim();
        if (!util.Tools.checkScreen(screen)) {
            util.Message.showMessage("Screen solution accepted only 13, 14, 15.6, 17.3");
            return;
        }

        String serial = txtSerial.getText().toUpperCase().trim();
        if (!util.Tools.isContain(dao.getList(), serial)) {
            util.Message.showMessage("Serial is not existed. Cannot update");
            return;
        }

        String img = urlImg;

        boolean dvd = chkDVD.isSelected();
        boolean del = chkDelete.isSelected();
        if (del) {
            int option = util.Message.confirmMessage("Do you wish to delete this Laptop?", "Delete this Laptop?");
            if (option != 0) {
                return;
            }
        }
        boolean se = chkSE.isSelected();
        boolean sb = chkSB.isSelected();
        boolean ia = chkIA.isSelected();
        boolean gd = chkGD.isSelected();
        if (!se && !sb && !ia && !gd) {
            util.Message.showMessage("Choose at least one Major");
        }

        boolean updated = dao.updateNewLaptop(brand, serial, chip, chipSerial, ramType, ram, hdd, graphicCard, screen, img, price, se, sb, ia, gd, dvd, del);
        if (updated) {
            util.Message.showMessage("Update Successfull, Reload List");
            int row = tblList.getSelectedRow();
            LaptopDTO dto = new LaptopDTO(brand, serial, chip, chipSerial, ramType, ram, hdd, graphicCard, screen, img, price, se, sb, ia, gd, dvd, del);
            dao.getList().set(row, dto);
            updateTable(dao.getList());
        } else {
            util.Message.showMessage("Update Failed. An error occur\n"
                    + "CAUSTION REMEMBER : SERIAL MUST NOT BE MODIFIED");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        int price;
        try {
            price = util.Tools.getInt(txtPrice.getText(), 1000, Integer.MAX_VALUE);
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String brand = txtBrand.getText().toUpperCase().trim();

        if (!util.Tools.checkBrand(brand)) {
            util.Message.showMessage("Invalid Brand");
            return;
        }

        String chip = txtChipset.getText().toUpperCase().trim();
        String chipSerial = txtChipsetSerial.getText().toUpperCase().trim();
        String graphicCard = txtGraphicCard.getText().toUpperCase().trim();

        String hdd = txtHDDCapacity.getText();
        try {
            util.Tools.getInt(hdd, 500, Integer.MAX_VALUE);
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String ram = txtRAMCapacity.getText();
        try {
            if (!util.Tools.checkRAM(ram)) {
            }
        } catch (Exception e) {
            util.Message.showMessage(e.getMessage());
            return;
        }

        String ramType = txtRAMType.getText().toUpperCase().trim();
        if (!util.Tools.checkRAMType(ramType)) {
            util.Message.showMessage("RAM Type invalid : " + ramType
                    + "\nOnly DDR4 or DDR3 accepted");
            return;
        }

        String screen = txtScreen.getText().toUpperCase().trim();
        if (!util.Tools.checkScreen(screen)) {
            util.Message.showMessage("Screen solution accepted only 13, 14, 15.6, 17.3");
            return;
        }

        String serial = txtSerial.getText().toUpperCase().trim();
        if (util.Tools.isContain(dao.getList(), serial)) {
            util.Message.showMessage("Serial already existed");
            return;
        }

        String img = "img\\0.png";
        int option = util.Message.confirmMessage("Do you wish to add this Laptop a picture?", "Upload Image?");
        if (option == 0) {
            btnEditImgActionPerformed(evt);
            img = urlImg;
        }

        boolean dvd = chkDVD.isSelected();
        boolean del = chkDelete.isSelected();
        if (del) {
            option = util.Message.confirmMessage("Do you wish to delete this Laptop?", "Delete this Laptop?");
            if (option != 0) {
                return;
            }
        }

        boolean se = chkSE.isSelected();
        boolean sb = chkSB.isSelected();
        boolean ia = chkIA.isSelected();
        boolean gd = chkGD.isSelected();
        if (!se && !sb && !ia && !gd) {
            util.Message.showMessage("Choose at least one Major");
        }

        boolean inserted = dao.insertNewLaptop(brand, serial, chip, chipSerial, ramType, ram, hdd, graphicCard, screen, img, price, se, sb, ia, gd, dvd, del);
        if (inserted) {
            util.Message.showMessage("Insert Successfull, Reload List");
            updateTable(dao.getList());
        } else {
//            util.Message.showMessage("Update Failed. An error occur\n"
//                    + "CAUSTION REMEMBER : SERIAL MUST NOT BE MODIFIED");
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private String getImg(String serial) {
        String img = "img\\" + serial + ".jpg";
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);
        File file = fileChooser.getSelectedFile();
        ImageLoader.saveImage(file, img);
        return img;
    }

    private void btnEditImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditImgActionPerformed
        // TODO add your handling code here:
        String img;
        try {
            img = txtSerial.getText();
            if (img.length() == 0) {
                util.Message.showMessage("Please insert serial first");
                return;
            }
            urlImg = getImg(img);
            ImageLoader.loadImage(urlImg, lblImg);
        } catch (Exception e) {
            util.Message.showMessage("Cannot choose this file");
        }
    }//GEN-LAST:event_btnEditImgActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditImg;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkDVD;
    private javax.swing.JCheckBox chkDVDSearch;
    private javax.swing.JCheckBox chkDelete;
    private javax.swing.JCheckBox chkGD;
    private javax.swing.JCheckBox chkGDSearch;
    private javax.swing.JCheckBox chkIA;
    private javax.swing.JCheckBox chkIASearch;
    private javax.swing.JCheckBox chkSB;
    private javax.swing.JCheckBox chkSBSearch;
    private javax.swing.JCheckBox chkSE;
    private javax.swing.JCheckBox chkSESearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label1;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel pnlAdmin;
    private javax.swing.JPanel pnlDetail;
    private javax.swing.JPanel pnlFeature;
    private javax.swing.JPanel pnlImg;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlInfoSearch;
    private javax.swing.JPanel pnlMajor;
    private javax.swing.JPanel pnlRequirement;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlSort;
    private javax.swing.JScrollPane pnlTbl;
    private javax.swing.JPanel pnlTile;
    private javax.swing.JRadioButton rdnAscPrice;
    private javax.swing.JRadioButton rdnDecPrice;
    private javax.swing.JRadioButton rdnName;
    private javax.swing.ButtonGroup sort;
    private javax.swing.JTable tblList;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtBrandSearch;
    private javax.swing.JTextField txtChipset;
    private javax.swing.JTextField txtChipsetSearch;
    private javax.swing.JTextField txtChipsetSerial;
    private javax.swing.JTextField txtChipsetSerialSearch;
    private javax.swing.JTextField txtGraphicCard;
    private javax.swing.JTextField txtGraphicCardSearch;
    private javax.swing.JTextField txtHDDCapacity;
    private javax.swing.JTextField txtHDDCapacitySearch;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPriceFrom;
    private javax.swing.JTextField txtPriceTo;
    private javax.swing.JTextField txtRAMCapacity;
    private javax.swing.JTextField txtRAMCapacitySearch;
    private javax.swing.JTextField txtRAMType;
    private javax.swing.JTextField txtRAMTypeSearch;
    private javax.swing.JTextField txtScreen;
    private javax.swing.JTextField txtScreenSearch;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtSerialSearch;
    // End of variables declaration//GEN-END:variables
}
